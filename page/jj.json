{"title":"https://juejin.cn/post/6966967718721355784","time":"2021-05-29T10:56:23.238Z","article":"<div class=\"markdown-body\"><style>.markdown-body{word-break:break-word;line-height:1.75;font-weight:400;font-size:15px;overflow-x:hidden;color:#333}.markdown-body h1,.markdown-body h2,.markdown-body h3,.markdown-body h4,.markdown-body h5,.markdown-body h6{line-height:1.5;margin-top:35px;margin-bottom:10px;padding-bottom:5px}.markdown-body h1{font-size:30px;margin-bottom:5px}.markdown-body h2{padding-bottom:12px;font-size:24px;border-bottom:1px solid #ececec}.markdown-body h3{font-size:18px;padding-bottom:0}.markdown-body h4{font-size:16px}.markdown-body h5{font-size:15px}.markdown-body h6{margin-top:5px}.markdown-body p{line-height:inherit;margin-top:22px;margin-bottom:22px}.markdown-body img{max-width:100%}.markdown-body hr{border:none;border-top:1px solid #ddd;margin-top:32px;margin-bottom:32px}.markdown-body code{word-break:break-word;border-radius:2px;overflow-x:auto;background-color:#fff5f5;color:#ff502c;font-size:.87em;padding:.065em .4em}.markdown-body code,.markdown-body pre{font-family:Menlo,Monaco,Consolas,Courier New,monospace}.markdown-body pre{overflow:auto;position:relative;line-height:1.75}.markdown-body pre>code{font-size:12px;padding:15px 12px;margin:0;word-break:normal;display:block;overflow-x:auto;color:#333;background:#f8f8f8}.markdown-body a{text-decoration:none;color:#0269c8;border-bottom:1px solid #d1e9ff}.markdown-body a:active,.markdown-body a:hover{color:#275b8c}.markdown-body table{display:inline-block!important;font-size:12px;width:auto;max-width:100%;overflow:auto;border:1px solid #f6f6f6}.markdown-body thead{background:#f6f6f6;color:#000;text-align:left}.markdown-body tr:nth-child(2n){background-color:#fcfcfc}.markdown-body td,.markdown-body th{padding:12px 7px;line-height:24px}.markdown-body td{min-width:120px}.markdown-body blockquote{color:#666;padding:1px 23px;margin:22px 0;border-left:4px solid #cbcbcb;background-color:#f8f8f8}.markdown-body blockquote:after{display:block;content:\"\"}.markdown-body blockquote>p{margin:10px 0}.markdown-body ol,.markdown-body ul{padding-left:28px}.markdown-body ol li,.markdown-body ul li{margin-bottom:0;list-style:inherit}.markdown-body ol li .task-list-item,.markdown-body ul li .task-list-item{list-style:none}.markdown-body ol li .task-list-item ol,.markdown-body ol li .task-list-item ul,.markdown-body ul li .task-list-item ol,.markdown-body ul li .task-list-item ul{margin-top:0}.markdown-body ol ol,.markdown-body ol ul,.markdown-body ul ol,.markdown-body ul ul{margin-top:3px}.markdown-body ol li{padding-left:6px}.markdown-body .contains-task-list{padding-left:0}.markdown-body .task-list-item{list-style:none}@media (max-width:720px){.markdown-body h1{font-size:24px}.markdown-body h2{font-size:20px}.markdown-body h3{font-size:18px}}</style><p>对实现动画的前端同学们来说，<code>canvas</code>可以说是最自由，最能全面控制的一个动画实现载体。不但能通过<code>javascript</code>控制点、线、面的绘制，使用图片资源填充；还能改变输入参数作出交互动画，完全控制动画过程中的动作轨迹、速度、弹性等要素。</p>\n<p>但使用<code>canvas</code>开发过较复杂一点的动画的同学，可能会发现，完全使用<code>javascript</code>绘制、控制的动画，某些效果不太好实现（这篇文章只讨论2D），像模糊，光照，水滴等效果。虽然用逐像素处理的方法也可以实现，但<code>javascript</code>对这类型大量数据的计算并不擅长，实现出来每一帧绘制的时间十分感人，用他实现动画并不现实。</p>\n<p>但<code>canvas</code>除了最常用的<code>javascript</code> API绘制方式（<code>getContext('2d')</code>），还有WebGL的方式（<code>getContext(webgl)</code>），对前面说到的大量数据计算的场景，可以说是最适合发挥的地方。WebGL对很多同学来说就是实现3D场景的，其实对2D绘图来说，也有很大的发挥场景。</p>\n<h2 data-id=\"heading-0\">为什么WebGL会比较厉害</h2>\n<p>我们来看看<code>javascript</code> API绘制和webGL绘制原理上的不同之处：</p>\n<p>如果使用<code>javascript</code>对画布的逐个像素进行处理，那这部分处理工作就需要在<code>javascript</code>的运行环境里进行，我们知道<code>javascript</code>的执行是单线程的，所以只能逐个逐个像素进行计算和绘制。就像一个细长的漏斗，一滴一滴水的往下漏。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5a68f9999ee247eda9fdc1818be7446a~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b3d239848921472c89efaa691393259f~tplv-k3u1fbpfcp-zoom-1.image\" loading=\"lazy\"></p>\n<p>而WebGL的处理方式，是用GPU驱动的，对每一个像素的处理，都是在GPU上执行，而GPU有许多渲染管道，这些\b处理可以在这些管道中并行执行，这就是WebGL擅长这种大量数据计算场景的原因。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c25a5ab745524962b7c3bf3c869bdf47~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2eff6dcbdc094e6b9b2742900b9b302b~tplv-k3u1fbpfcp-zoom-1.image\" loading=\"lazy\"></p>\n<h2 data-id=\"heading-1\">WebGL那么厉害，都用它绘图就好喇</h2>\n<p>WebGL虽然有上面说的优点，但也有个致命的缺点：不好学，想要简单画根线也要费一番力气。</p>\n<p>GPU并行管道之间是不知道另一个管道输出的是什么，只知道自己管道的输入和需要执行的程序；而且不保留状态，管道自己并不知道在这次任务之前执行过什么程序，有什么输入输出值，类似现在纯函数的概念。这些观念上的不同就提升了使用WebGL绘图的门槛。</p>\n<p>另外这些跑在GPU里的程序不是<code>javascript</code>，是一种类C语言，这也需要前端同学们另外再学习。</p>\n<h2 data-id=\"heading-2\">Hello, world</h2>\n<p>那门槛再高也总有需要跨过去的一天的，下面一步一步控制WebGL去<code>画</code>一点图案，大家也可以体会一下，适合在什么时候使用这一门技术。</p>\n<h3 data-id=\"heading-3\">基础环境——大荧幕</h3>\n<p>为尽快进入GLSL着色器的阶段，这里基础WebGL环境搭建用了<code>Three.js</code>，大家可以研究下这个基础环境的搭建，不用第三方库其实也用不了多少代码量。</p>\n<p>以下是基础环境的搭建:</p>\n<pre><code class=\"hljs language-js copyable\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">init</span>(<span class=\"hljs-params\">canvas</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> renderer = <span class=\"hljs-keyword\">new</span> THREE.WebGLRenderer({canvas});\n  renderer.autoClearColor = <span class=\"hljs-literal\">false</span>;\n \n  <span class=\"hljs-keyword\">const</span> camera = <span class=\"hljs-keyword\">new</span> THREE.OrthographicCamera(\n    -<span class=\"hljs-number\">1</span>, <span class=\"hljs-comment\">// left</span>\n     <span class=\"hljs-number\">1</span>, <span class=\"hljs-comment\">// right</span>\n     <span class=\"hljs-number\">1</span>, <span class=\"hljs-comment\">// top</span>\n    -<span class=\"hljs-number\">1</span>, <span class=\"hljs-comment\">// bottom</span>\n    -<span class=\"hljs-number\">1</span>, <span class=\"hljs-comment\">// near,</span>\n     <span class=\"hljs-number\">1</span>, <span class=\"hljs-comment\">// far</span>\n  );\n  <span class=\"hljs-keyword\">const</span> scene = <span class=\"hljs-keyword\">new</span> THREE.Scene();\n  <span class=\"hljs-keyword\">const</span> plane = <span class=\"hljs-keyword\">new</span> THREE.PlaneGeometry(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>);\n\n  <span class=\"hljs-keyword\">const</span> fragmentShader = <span class=\"hljs-string\">'............'</span>\n  <span class=\"hljs-keyword\">const</span> uniforms = {\n    <span class=\"hljs-attr\">u_resolution</span>:  { <span class=\"hljs-attr\">value</span>: <span class=\"hljs-keyword\">new</span> THREE.Vector2(canvas.width, canvas.height) },\n    <span class=\"hljs-attr\">u_time</span>: { <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">0</span> }\n  };\n  <span class=\"hljs-keyword\">const</span> material = <span class=\"hljs-keyword\">new</span> THREE.ShaderMaterial({\n    fragmentShader,\n    uniforms,\n  });\n  scene.add(<span class=\"hljs-keyword\">new</span> THREE.Mesh(plane, material));\n \n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>) </span>{\n    material.uniforms.u_time.value++;\n    renderer.render(scene, camera);\n    requestAnimationFrame(render);\n  }\n\n  render()\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>解释一下上面这段代码做了什么：创建了一个3D场景（说好的2D呢？），把一个矩形平面糊在摄像机前面，占满摄像机视觉范围，就像看IMAX坐最前排，你能看到的就只有面前的屏幕的感觉，屏幕上的画面就是你的整个世界。我们的绘图就在这个屏幕上。</p>\n<p>再说明一下，着色器分为顶点着色器<code>VERTEX_SHADER</code>和片段着色器<code>FRAGMENT_SHADER</code>。</p>\n<p>顶点着色器对3D场景里物体的每个顶点计算值，如颜色、法线向量等，在这里我们只讨论2D画面，顶点着色器的部分就由<code>Three.js</code>代劳了，实现的作用就是固定了场景中镜头和屏幕的位置。</p>\n<p>而片段着色器的作用就是计算平面上每一个片段（在这里是屏幕上每一个像素）输出的颜色值，也是这篇文章研究的对象。</p>\n<p>片段着色器入参有<code>varying</code>和<code>uniform</code>两种，<code>varying</code>简单说一下是由顶点着色器传入的，每个片段输入的值由相关的顶点线性插值得到，所以每个片段上的值不一样，本文先不讨论这部分（不然写不完了）。<code>uniform</code>是统一值，由着色器外部传入，每个片段得到的值是一样的，在这里就是我们从<code>javascript</code>输入变量的入口。上面的代码我们就为片段着色器传入了<code>u_resolution</code>，包含画布的宽高值。</p>\n<h3 data-id=\"heading-4\">第一个着色器</h3>\n<p><code>fragmentShader</code>为着色器的程序代码，一般的构成为:</p>\n<pre><code class=\"hljs language-glsl copyable\" lang=\"glsl\"><span class=\"hljs-meta\">#ifdef GL_ES</span>\n<span class=\"hljs-keyword\">precision</span> <span class=\"hljs-keyword\">mediump</span> <span class=\"hljs-type\">float</span>;\n<span class=\"hljs-meta\">#endif</span>\n\n<span class=\"hljs-keyword\">uniform</span> <span class=\"hljs-type\">vec2</span> u_resolution;\n\n<span class=\"hljs-type\">void</span> main() {\n  <span class=\"hljs-built_in\">gl_FragColor</span> = <span class=\"hljs-type\">vec4</span>(<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">0.0</span>, <span class=\"hljs-number\">0.0</span>, <span class=\"hljs-number\">1.0</span>);\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>在前3行检查了是否定义了<code>GL_ES</code>，这通常在移动端或浏览器下会定义，第2行指定了浮点数<code>float</code>的精度为中等，\b也可以指定为低精度<code>lowp</code>或高精度<code>highp</code>，精度越低执行速度越快，但质量会降低。值得一提的是，同样的设置在不同的执行环境下可能会表现不一样，例如某些移动端的浏览器环境，需要指定为高精度才能获得和PC端浏览器里中等精度一样的表现。</p>\n<p>第5行指定了着色器可以接收哪些入参，这里就只有一个入参：类型为vec2的<code>u_resolution</code>。</p>\n<p>最后3行描述了着色器的主程序，其中可以对入参和其他信息作处理，最后输出颜色到<code>gl_FragColor</code>，代表这个片段显示的颜色，其中4个数值代表<code>RGBA</code>（红、绿、蓝、透明度），数值范围为<code>0.0 ~ 1.0</code>。</p>\n<p>为什么要写<code>0.0</code>而不是<code>0</code>呢，因为<code>GLSL</code>里不像<code>javascript</code>数字只有一个类型，而是分成整形(<code>int</code>)和浮点数(<code>float</code>)，而浮点数必须包含小数点，当小数点前是0的时候，写成<code>.0</code>也可以。</p>\n<p>那大家看完这段解说，应该能猜到上面的着色器会输出什么吧，对，就是全屏的红色。</p>\n<p>这就是最基础的片段着色器。</p>\n<h3 data-id=\"heading-5\">使用uniform</h3>\n<p>大家应该注意到上面的例子没有用到传入的uniform值，下面来说一下这些值怎么用。</p>\n<p>看之前搭建基础环境的<code>javascript</code>代码可以看到，<code>u_resolution</code>存储了画布的宽高，这个值在着色器有什么用呢？</p>\n<p>这要说到片元着色器的另一个内建的值<code>gl_FragCoord</code>，这个值存储的是片段（像素）的座标<code>x</code>，<code>y</code>值，使用这两个值就可以知道当前着色器计算的是画布上哪个位置的颜色。举个例子：</p>\n<pre><code class=\"hljs language-glsl copyable\" lang=\"glsl\"><span class=\"hljs-meta\">#ifdef GL_ES</span>\n<span class=\"hljs-keyword\">precision</span> <span class=\"hljs-keyword\">mediump</span> <span class=\"hljs-type\">float</span>;\n<span class=\"hljs-meta\">#endif</span>\n\n<span class=\"hljs-keyword\">uniform</span> <span class=\"hljs-type\">vec2</span> u_resolution;\n\n<span class=\"hljs-type\">void</span> main() {\n  <span class=\"hljs-type\">vec2</span> st = <span class=\"hljs-built_in\">gl_FragCoord</span>.xy / u_resolution;\n  <span class=\"hljs-built_in\">gl_FragColor</span> = <span class=\"hljs-type\">vec4</span>(st, <span class=\"hljs-number\">0.0</span>, <span class=\"hljs-number\">1.0</span>);\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>可以看到这样的图像：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/30c0a0251fe74e49a929aa2b085e4180~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/deba900f59574066893b54e13ce62846~tplv-k3u1fbpfcp-zoom-1.image\" loading=\"lazy\"></p>\n<p>上面的着色器代码，使用归一化后的<code>x</code>、<code>y</code>座标输出到<code>gl_FragColor</code>的红、绿色部分。</p>\n<p>从图中可以看出，<code>gl_FragCoord</code>的<code>(0, 0)</code>点在左下角，x轴和y轴方向分别为向右和向上。</p>\n<p>另一个uniform值<code>u_time</code>就是一个随着时间不断增加的值，利用这个值可以使图像随时间变化，实现动画的效果。</p>\n<p>上面的着色器再改写一下：</p>\n<pre><code class=\"hljs language-glsl copyable\" lang=\"glsl\"><span class=\"hljs-meta\">#ifdef GL_ES</span>\n<span class=\"hljs-keyword\">precision</span> <span class=\"hljs-keyword\">mediump</span> <span class=\"hljs-type\">float</span>;\n<span class=\"hljs-meta\">#endif</span>\n\n<span class=\"hljs-keyword\">uniform</span> <span class=\"hljs-type\">vec2</span> u_resolution;\n<span class=\"hljs-keyword\">uniform</span> <span class=\"hljs-type\">float</span> u_time;\n\n<span class=\"hljs-type\">void</span> main() {\n  <span class=\"hljs-type\">vec2</span> st = <span class=\"hljs-built_in\">gl_FragCoord</span>.xy / u_resolution;\n  <span class=\"hljs-built_in\">gl_FragColor</span> = <span class=\"hljs-type\">vec4</span>(st, <span class=\"hljs-built_in\">sin</span>(u_time / <span class=\"hljs-number\">100.0</span>), <span class=\"hljs-number\">1.0</span>);\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>可以看到下图的效果：</p>\n<p><a href=\"http://storage.360buyimg.com/element-video/QQ20210330-195823.mp4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">storage.360buyimg.com/element-vid…</a></p>\n<p>着色器中使用三角函数<code>sin</code>，在颜色输出的蓝色通道做一个从0到1的周期变化。</p>\n<h2 data-id=\"heading-6\">还能做什么？</h2>\n<p>掌握基本的原理后，就是开始从大师的作品中学习了。<a href=\"https://www.shadertoy.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">shadertoy</a>是一个类似codepen的着色器playgroud，上面的着色器都是利用上面的基本工具，还有一些造型函数，造出各种眼花缭乱的特效、动画。</p>\n<p>上面就是GLSL着色器基本的开发工具，现在就可以开始开发你自己的着色器，剩下就是使用数学方面的技能了。</p></div>"}